function main (.text) {
    ret_0x4004b6:
    0x4004b6: push rbp
    0x4004b7: rbp = rsp # mov rbp, rsp
    0x4004ba: *(rdi) = al
    0x4004ba: rdi += D # stosb byte ptr [rdi], al
    0x4004bb: *(rdi) = ax
    0x4004bb: rdi += D # stosw word ptr [rdi], ax
    0x4004bd: *(rdi) = eax
    0x4004bd: rdi += D # stosd dword ptr [rdi], eax
    0x4004be: *(rdi) = rax
    0x4004be: rdi += D # stosq qword ptr [rdi], rax
    0x4004c0: *(rdi) = *(rsi)
    0x4004c0: rdi += D
    0x4004c0: rsi += D # movsb byte ptr [rdi], byte ptr [rsi]
    0x4004c1: *(rdi) = *(rsi)
    0x4004c1: rdi += D
    0x4004c1: rsi += D # movsw word ptr [rdi], word ptr [rsi]
    0x4004c3: *(rdi) = *(rsi)
    0x4004c3: rdi += D
    0x4004c3: rsi += D # movsd dword ptr [rdi], dword ptr [rsi]
    0x4004c4: *(rdi) = *(rsi)
    0x4004c4: rdi += D
    0x4004c4: rsi += D # movsq qword ptr [rdi], qword ptr [rsi]
    0x4004c6: al = *(rsi)
    0x4004c6: rsi += D # lodsb al, byte ptr [rsi]
    0x4004c7: ax = *(rsi)
    0x4004c7: rsi += D # lodsw ax, word ptr [rsi]
    0x4004c9: eax = *(rsi)
    0x4004c9: rsi += D # lodsd eax, dword ptr [rsi]
    0x4004ca: rax = *(rsi)
    0x4004ca: rsi += D # lodsq rax, qword ptr [rsi]
    0x4004cc: *(rsi) cmp *(rdi)
    0x4004cc: rsi += D
    0x4004cc: rdi' += D # cmpsb byte ptr [rsi], byte ptr [rdi]
    0x4004cd: *(rsi) cmp *(rdi)
    0x4004cd: rsi += D
    0x4004cd: rdi' += D # cmpsw word ptr [rsi], word ptr [rdi]
    0x4004cf: *(rsi) cmp *(rdi)
    0x4004cf: rsi += D
    0x4004cf: rdi' += D # cmpsd dword ptr [rsi], dword ptr [rdi]
    0x4004d0: *(rsi) cmp *(rdi)
    0x4004d0: rsi += D
    0x4004d0: rdi' += D # cmpsq qword ptr [rsi], qword ptr [rdi]
    0x4004d2: al cmp *(rdi)
    0x4004d2: rdi += D # scasb al, byte ptr [rdi]
    0x4004d3: ax cmp *(rdi)
    0x4004d3: rdi += D # scasw ax, word ptr [rdi]
    0x4004d5: eax cmp *(rdi)
    0x4004d5: rdi += D # scasd eax, dword ptr [rdi]
    0x4004d6: rax cmp *(rdi)
    0x4004d6: rdi += D # scasq rax, qword ptr [rdi]
    while (!rcx)) {
        0x4004d8: al cmp *(rdi)
        0x4004d8: rdi += D
        0x4004d8: rcx--
        if (!Z) break
    } # repne scasb al, byte ptr [rdi]
    while (!rcx)) {
        0x4004da: *(rdi) = al
        0x4004da: rdi += D
        0x4004da: rcx--
    } # rep stosb byte ptr [rdi], al
    0x4004dc: eax = 0 # mov eax, 0
    0x4004e1: pop rbp
    0x4004e2: ret
}
