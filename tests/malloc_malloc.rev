function malloc (raw) {
    int32_t var1
    int32_t var2
    int32_t var3
    int32_t var4
    int64_t var5
    int64_t var6
    int64_t var7
    int64_t var8
    int64_t var9
    0x7b380: push rbp
    0x7b381: push rbx
    0x7b382: rsp -= 8 # sub rsp, 8
    0x7b386: rax = *(0x39ded8) # mov rax, qword ptr [rip + 0x322b4b]
    0x7b38d: rax = *(rax) # mov rax, qword ptr [rax]
    # 0x7b390: test rax, rax
    # 0x7b393: jne 0x7b4e8
    if (rax == 0) {
        0x7b399: rax = *(0x39dd80) # mov rax, qword ptr [rip + 0x3229e0]
        0x7b3a0: rbp = rdi # mov rbp, rdi
        0x7b3a3: rbx = *(rax) # mov rbx, qword ptr fs:[rax]
        # 0x7b3a7: test rbx, rbx
        # 0x7b3aa: je 0x7b3b8
        if (rbx != 0) {
            0x7b3ac: eax = *(rbx + 4) # mov eax, dword ptr [rbx + 4]
            # 0x7b3af: and eax, 4
            # 0x7b3b2: je 0x7b450
            and if ((eax &= 4) == 0)
            0x7b450: esi = 1 # mov esi, 1
            # 0x7b455: cmp dword ptr [rip + 0x328384], 0
            # 0x7b45c: je 0x7b466
            if (*(__libc_multiple_threads) != 0) {
                0x7b45e: lock cmpxchg *(rbx), esi # lock cmpxchg dword ptr [rbx], esi
                # 0x7b462: jne 0x7b46b
                if == {
                    0x7b464: jmp 0x7b481
                }
                0x7b46b: rdi = rbx # lea rdi, qword ptr [rbx]
                0x7b46e: rsp -= 128 # sub rsp, 0x80
                0x7b475: call 0xf5650
                0x7b47a: rsp += 128 # add rsp, 0x80
            } else {
                0x7b466: cmpxchg *(rbx), esi # cmpxchg dword ptr [rbx], esi
                # 0x7b469: je 0x7b481
                if != {
                    goto 0x7b46b
                }
            }
            0x7b481: jmp 0x7b3c9
            0x7b3c9: rsi = rbp # mov rsi, rbp
            0x7b3cc: rdi = rbx # mov rdi, rbx
            0x7b3cf: call _int_malloc
            0x7b3d4: test rax, rax
            0x7b3d7: rdx = rax # mov rdx, rax
            # 0x7b3da: je 0x7b4b8
            if != {
                goto 0x7b3e0
            }
            0x7b4b8: rdi = rbx # mov rdi, rbx
            0x7b4bb: rsi = rbp # mov rsi, rbp
            0x7b4be: call arena_get_retry
            0x7b4c3: rsi = rbp # mov rsi, rbp
            0x7b4c6: rdi = rax # mov rdi, rax
            0x7b4c9: rbx = rax # mov rbx, rax
            0x7b4cc: call _int_malloc
            0x7b4d1: rdx = rax # mov rdx, rax
            goto 0x7b4d4
        } else {
            0x7b3b8: call get_free_list
            0x7b3bd: test rax, rax
            0x7b3c0: rbx = rax # mov rbx, rax
            # 0x7b3c3: je 0x7b490
            if != {
                goto 0x7b3c9
            }
            0x7b490: esi = 0 # xor esi, esi
            0x7b492: rdi = rbp # mov rdi, rbp
            0x7b495: call arena_get2.isra.3.part.4
            0x7b49a: rsi = rbp # mov rsi, rbp
            0x7b49d: rdi = rax # mov rdi, rax
            0x7b4a0: rbx = rax # mov rbx, rax
            0x7b4a3: call _int_malloc
            0x7b4a8: test rax, rax
            0x7b4ab: rdx = rax # mov rdx, rax
            # 0x7b4ae: jne 0x7b4d4
            if == {
                # 0x7b4b0: test rbx, rbx
                # 0x7b4b3: je 0x7b4d4
                and if (rbx != 0)
                0x7b4b5: nop *(rax) # nop dword ptr [rax]
                goto 0x7b4b8
            }
            # 0x7b4d4: test rbx, rbx
            # 0x7b4d7: je 0x7b40a
            if (rbx != 0) {
                0x7b4dd: jmp 0x7b3e0
                # 0x7b3e0: cmp dword ptr [rip + 0x3283f9], 0
                # 0x7b3e7: je 0x7b3f0
                if (*(__libc_multiple_threads) != 0) {
                    0x7b3e9: *(rbx)-- # lock dec dword ptr [rbx]
                    # 0x7b3ec: jne 0x7b3f4
                    if == {
                        0x7b3ee: jmp 0x7b40a
                    }
                    0x7b3f4: rdi = rbx # lea rdi, qword ptr [rbx]
                    0x7b3f7: rsp -= 128 # sub rsp, 0x80
                    0x7b3fe: call __lll_unlock_wake_private
                    0x7b403: rsp += 128 # add rsp, 0x80
                } else {
                    0x7b3f0: *(rbx)-- # dec dword ptr [rbx]
                    # 0x7b3f2: je 0x7b40a
                    if != {
                        goto 0x7b3f4
                    }
                }
            }
        }
    } else {
        0x7b4e8: rsi = *(rsp + 24) # mov rsi, qword ptr [rsp + 0x18]
        0x7b4ed: rsp += 8 # add rsp, 8
        0x7b4f1: pop rbx
        0x7b4f2: pop rbp
        ret_0x7b4f3:
        0x7b4f3: jmp rax # STOPPED
    }
    # 0x7b40a: test rdx, rdx
    # 0x7b40d: je 0x7b4f8
    if (rdx != 0) {
        0x7b413: rax = *(rdx - 8) # mov rax, qword ptr [rdx - 8]
        0x7b417: test al, '\x02'
        # 0x7b419: jne 0x7b43c
        if == {
            0x7b41b: test al, '\x04'
            0x7b41d: rcx = main_arena # lea rcx, qword ptr [rip + 0x32371c]
            # 0x7b424: je 0x7b433
            if != {
                0x7b426: rax = rdx - 16 # lea rax, qword ptr [rdx - 0x10]
                0x7b42a: rax &= 4227858432 # and rax, 0xfc000000
                0x7b430: rcx = *(rax) # mov rcx, qword ptr [rax]
            }
            # 0x7b433: cmp rcx, rbx
            # 0x7b436: jne 0x7b4ff
            if (rcx == rbx) {
                goto 0x7b43c
            }
            0x7b4ff: rcx = 0x16ae38 # lea rcx, qword ptr [rip + 0xef932]
            0x7b506: rsi = 0x166204 # lea rsi, qword ptr [rip + 0xeacf7]
            0x7b50d: rdi = 0x16a5c8 # lea rdi, qword ptr [rip + 0xef0b4]
            0x7b514: edx = 2921 # mov edx, 0xb69
            0x7b519: call __malloc_assert
            0x7b51e: nop
            malloc_atfork
            0x7b520: rax = *(0x39dd80) # mov rax, qword ptr [rip + 0x322859]
            0x7b527: rdx = rdi # mov rdx, rdi
            # 0x7b52a: cmp qword ptr fs:[rax], -1
            # 0x7b52f: je 0x7b5b0
            if (*(rax) != -1) {
                0x7b531: esi = 1 # mov esi, 1
                0x7b536: eax = 0 # xor eax, eax
                # 0x7b538: cmp dword ptr [rip + 0x3282a1], 0
                # 0x7b53f: je 0x7b54d
                if (*(__libc_multiple_threads) != 0) {
                    0x7b541: lock cmpxchg *(list_lock), esi # lock cmpxchg dword ptr [rip + 0x32530f], esi
                    # 0x7b549: jne 0x7b556
                    if == {
                        0x7b54b: jmp 0x7b570
                    }
                    0x7b556: rdi = list_lock # lea rdi, qword ptr [rip + 0x3252fb]
                    0x7b55d: rsp -= 128 # sub rsp, 0x80
                    0x7b564: call 0xf5650
                    0x7b569: rsp += 128 # add rsp, 0x80
                } else {
                    0x7b54d: cmpxchg *(list_lock), esi # cmpxchg dword ptr [rip + 0x325304], esi
                    # 0x7b554: je 0x7b570
                    if != {
                        goto 0x7b556
                    }
                }
                # 0x7b570: cmp dword ptr [rip + 0x328269], 0
                # 0x7b577: je 0x7b584
                if (*(__libc_multiple_threads) != 0) {
                    0x7b579: *(list_lock)-- # lock dec dword ptr [rip + 0x3252d8]
                    # 0x7b580: jne 0x7b58c
                    if == {
                        0x7b582: jmp 0x7b5a6
                    }
                    0x7b58c: rdi = list_lock # lea rdi, qword ptr [rip + 0x3252c5]
                    0x7b593: rsp -= 128 # sub rsp, 0x80
                    0x7b59a: call __lll_unlock_wake_private
                    0x7b59f: rsp += 128 # add rsp, 0x80
                } else {
                    0x7b584: *(list_lock)-- # dec dword ptr [rip + 0x3252ce]
                    # 0x7b58a: je 0x7b5a6
                    if != {
                        goto 0x7b58c
                    }
                }
                0x7b5a6: rdi = rdx # mov rdi, rdx
                0x7b5a9: jmp 0x7b380
            }
            0x7b5b0: rax = 0x7a320 # lea rax, qword ptr [rip - 0x1297]
            # 0x7b5b7: cmp qword ptr [rip + 0x325282], rax
            # 0x7b5be: je 0x7b5d0
            if (*(save_malloc_hook) != rax) {
                0x7b5c0: rsi = rdi # mov rsi, rdi
                0x7b5c3: rdi = main_arena # lea rdi, qword ptr [rip + 0x323576]
                0x7b5ca: jmp _int_malloc
                _int_malloc
                # 0x79740: cmp rsi, 0xbf
                # 0x79744: ja 0x79eec
                if (rsi (unsigned) <= '\xbf') {
                    0x7974a: rax = rsi # mov rax, rsi
                    0x7974d: push r15
                    0x7974f: push r14
                    0x79751: rax += 23 # add rax, 0x17
                    0x79755: push r13
                    0x79757: push r12
                    0x79759: push rbp
                    0x7975a: push rbx
                    0x7975b: r9 = rax # mov r9, rax
                    0x7975e: r9 &= -16 # and r9, 0xfffffffffffffff0
                    0x79762: r15 = rdi # mov r15, rdi
                    0x79765: rsp -= 104 # sub rsp, 0x68
                    0x79769: rax cmp ' ' # cmp rax, 0x20
                    0x7976d: eax = 32 # mov eax, 0x20
                    0x79772: cmovae rax, r9
                    0x79776: test rdi, rdi
                    0x79779: *(rsp + 16) = rsi # mov qword ptr [rsp + 0x10], rsi
                    0x7977e: r13 = rax # mov r13, rax
                    # 0x79781: je 0x79f00
                    if != {
                        # 0x79787: cmp rax, qword ptr [rip + 0x3270d2]
                        # 0x7978e: ja 0x79800
                        if (rax (unsigned) <= *(global_max_fast)) {
                            0x79790: esi = eax # mov esi, eax
                            0x79792: esi >>= 4 # shr esi, 4
                            0x79795: eax = rsi - 2 # lea eax, dword ptr [rsi - 2]
                            0x79798: rcx = *(r15 + (rax*8) + 8) # mov rcx, qword ptr [r15 + rax*8 + 8]
                            0x7979d: rdi = rdi + (rax*8) # lea rdi, qword ptr [rdi + rax*8]
                            0x797a1: rsi = rax # mov rsi, rax
                            0x797a4: rdx = rdi + 8 # lea rdx, qword ptr [rdi + 8]
                            # 0x797a8: test rcx, rcx
                            # 0x797ab: je 0x79800
                            and if (rcx != 0)
                            0x797ad: r8 = *(rcx + 16) # mov r8, qword ptr [rcx + 0x10]
                            0x797b1: rax = rcx # mov rax, rcx
                            # 0x797b4: cmp dword ptr fs:[0x18], 0
                            # 0x797bd: je 0x797c0
                            if (*(fs + 24) != 0) {
                                0x797bf: lock cmpxchg *(rdi + 8), r8 # lock cmpxchg qword ptr [rdi + 8], r8
                            } else {
                                0x797c0: cmpxchg *(rdi + 8), r8 # cmpxchg qword ptr [rdi + 8], r8
                            }
                            0x797c5: rcx cmp rax # cmp rcx, rax
                            0x797c8: r14 = rax # mov r14, rax
                            # 0x797cb: jne 0x797fb
                            if == {
                                0x797cd: jmp 0x79a2e
                            }
                            loop {
                                loop_0x797fb:
                                # 0x797fb: test r14, r14
                                # 0x797fe: jne 0x797d8
                                if (r14 == 0)  goto 0x79800
                                0x797d8: rcx = *(r14 + 16) # mov rcx, qword ptr [r14 + 0x10]
                                0x797dc: rax = r14 # mov rax, r14
                                # 0x797df: cmp dword ptr fs:[0x18], 0
                                # 0x797e8: je 0x797eb
                                if (*(fs + 24) != 0) {
                                    0x797ea: lock cmpxchg *(rdx), rcx # lock cmpxchg qword ptr [rdx], rcx
                                } else {
                                    0x797eb: cmpxchg *(rdx), rcx # cmpxchg qword ptr [rdx], rcx
                                }
                                # 0x797ef: cmp rax, r14
                                # 0x797f2: je 0x79a2e
                                if (rax == r14)  goto 0x79a2e
                                0x797f8: r14 = rax # mov r14, rax
                            }
                            0x79a2e: eax = *(r14 + 8) # mov eax, dword ptr [r14 + 8]
                            0x79a32: eax >>= 4 # shr eax, 4
                            0x79a35: eax -= 2 # sub eax, 2
                            # 0x79a38: cmp esi, eax
                            # 0x79a3a: jne 0x79f3b
                            if (esi == eax) {
                                goto 0x79a40
                            }
                            0x79f3b: rsi = 0x16a450 # lea rsi, qword ptr [rip + 0xf050e]
                            0x79f42: edi = *(check_action) # mov edi, dword ptr [rip + 0x324228]
                            0x79f48: rdx = r14 + 16 # lea rdx, qword ptr [r14 + 0x10]
                            0x79f4c: rcx = r15 # mov rcx, r15
                            0x79f4f: call malloc_printerr
                            goto 0x79f54
                        }
                        # 0x79800: cmp r13, 0x3ff
                        # 0x79807: ja 0x79868
                        if (r13 (unsigned) <= 1023) {
                            0x79809: eax = r13d # mov eax, r13d
                            0x7980c: eax >>= 4 # shr eax, 4
                            0x7980f: *(rsp + 8) = eax # mov dword ptr [rsp + 8], eax
                            0x79813: eax = rax + rax - 2 # lea eax, dword ptr [rax + rax - 2]
                            0x79817: rax = r15 + (rax*8) + 96 # lea rax, qword ptr [r15 + rax*8 + 0x60]
                            0x7981c: rcx = rax + 8 # lea rcx, qword ptr [rax + 8]
                            0x79820: r14 = *(rcx + 8) # mov r14, qword ptr [rcx + 8]
                            0x79824: rax -= 8 # sub rax, 8
                            # 0x79828: cmp rax, r14
                            # 0x7982b: je 0x798a0
                            if (rax != r14) {
                                # 0x7982d: test r14, r14
                                # 0x79830: je 0x79898
                                if (r14 != 0) {
                                    0x79832: rdx = *(r14 + 24) # mov rdx, qword ptr [r14 + 0x18]
                                    # 0x79836: cmp r14, qword ptr [rdx + 0x10]
                                    # 0x7983a: jne 0x7a010
                                    if (r14 == *(rdx + 16)) {
                                        0x79840: *(r14 + r13 + 8) |= 1 # or qword ptr [r14 + r13 + 8], 1
                                        0x79846: *(rcx + 8) = rdx # mov qword ptr [rcx + 8], rdx
                                        0x7984a: *(rdx + 16) = rax # mov qword ptr [rdx + 0x10], rax
                                        0x7984e: rax = main_arena # lea rax, qword ptr [rip + 0x3252eb]
                                        # 0x79855: cmp r15, rax
                                        # 0x79858: je 0x79a40
                                        if (r15 != rax) {
                                            goto 0x7985e
                                        }
                                    } else {
                                        0x7a010: rsi = 0x16a478 # lea rsi, qword ptr [rip + 0xf0461]
                                        0x7a017: jmp 0x79f42
                                    }
                                    goto 0x79a40
                                }
                                goto 0x79898
                            }
                            goto 0x798a0
                        }
                        0x79868: rbp = r13 # mov rbp, r13
                        0x7986b: rbp >>= 6 # shr rbp, 6
                        # 0x7986f: cmp rbp, 0x30
                        # 0x79873: jbe 0x79ee0
                        if (rbp (unsigned) > '0') {
                            0x79879: rbp = r13 # mov rbp, r13
                            0x7987c: rbp >>= 9 # shr rbp, 9
                            # 0x79880: cmp rbp, 0x14
                            # 0x79884: ja 0x79f5b
                            if (rbp (unsigned) <= '\x14') {
                                0x7988a: eax = &(var1) # lea eax, dword ptr [rbp + 0x5b]
                                0x7988d: *(rsp + 8) = eax # mov dword ptr [rsp + 8], eax
                            } else {
                                0x79f5b: rbp = r13 # mov rbp, r13
                                0x79f5e: rbp >>= 12 # shr rbp, 0xc
                                # 0x79f62: cmp rbp, 0xa
                                # 0x79f66: jbe 0x79f85
                                if (rbp (unsigned) > '\n') {
                                    0x79f68: rbp = r13 # mov rbp, r13
                                    0x79f6b: rbp >>= 15 # shr rbp, 0xf
                                    # 0x79f6f: cmp rbp, 4
                                    # 0x79f73: ja 0x7a07c
                                    if (rbp (unsigned) <= '\x04') {
                                        0x79f79: eax = &(var2) # lea eax, dword ptr [rbp + 0x77]
                                        0x79f7c: *(rsp + 8) = eax # mov dword ptr [rsp + 8], eax
                                        0x79f80: jmp 0x79891
                                    } else {
                                        0x7a07c: rax = r13 # mov rax, r13
                                        0x7a07f: rax >>= 18 # shr rax, 0x12
                                        0x7a083: ebp = rax + 124 # lea ebp, dword ptr [rax + 0x7c]
                                        0x7a086: rax cmp '\x02' # cmp rax, 2
                                        0x7a08a: eax = 126 # mov eax, 0x7e
                                        0x7a08f: cmovbe eax, ebp
                                        0x7a092: *(rsp + 8) = eax # mov dword ptr [rsp + 8], eax
                                        0x7a096: jmp 0x79891
                                    }
                                } else {
                                    0x79f85: eax = &(var3) # lea eax, dword ptr [rbp + 0x6e]
                                    0x79f88: *(rsp + 8) = eax # mov dword ptr [rsp + 8], eax
                                    0x79f8c: jmp 0x79891
                                }
                            }
                        } else {
                            0x79ee0: eax = &(var4) # lea eax, dword ptr [rbp + 0x30]
                            0x79ee3: *(rsp + 8) = eax # mov dword ptr [rsp + 8], eax
                            0x79ee7: jmp 0x79891
                        }
                        0x79891: test *(r15 + 4), '\x01' # test byte ptr [r15 + 4], 1
                        # 0x79896: jne 0x798a0
                        if == {
                            0x79898: rdi = r15 # mov rdi, r15
                            0x7989b: call malloc_consolidate
                        }
                        0x798a0: rdi = r13 # mov rdi, r13
                        0x798a3: rax = r13 # mov rax, r13
                        0x798a6: rbx = r13 # mov rbx, r13
                        0x798a9: rdi >>= 12 # shr rdi, 0xc
                        0x798ad: rax >>= 6 # shr rax, 6
                        0x798b1: rbx >>= 9 # shr rbx, 9
                        0x798b5: *(rsp + 56) = rdi # mov qword ptr [rsp + 0x38], rdi
                        0x798ba: edi += 110 # add edi, 0x6e
                        0x798bd: *(rsp + 32) = rax # mov qword ptr [rsp + 0x20], rax
                        0x798c2: *(rsp + 68) = edi # mov dword ptr [rsp + 0x44], edi
                        0x798c6: rdi = r13 # mov rdi, r13
                        0x798c9: eax += 48 # add eax, 0x30
                        0x798cc: rdi >>= 15 # shr rdi, 0xf
                        0x798d0: *(rsp + 44) = eax # mov dword ptr [rsp + 0x2c], eax
                        0x798d4: eax = r13d # mov eax, r13d
                        0x798d7: *(rsp + 72) = rdi # mov qword ptr [rsp + 0x48], rdi
                        0x798dc: edi += 119 # add edi, 0x77
                        0x798df: eax >>= 4 # shr eax, 4
                        0x798e2: *(rsp + 88) = edi # mov dword ptr [rsp + 0x58], edi
                        0x798e6: rdi = r13 # mov rdi, r13
                        0x798e9: *(rsp + 40) = eax # mov dword ptr [rsp + 0x28], eax
                        0x798ed: rdi >>= 18 # shr rdi, 0x12
                        0x798f1: rax = r13 + 32 # lea rax, qword ptr [r13 + 0x20]
                        0x798f5: *(rsp + 48) = rbx # mov qword ptr [rsp + 0x30], rbx
                        0x798fa: *(rsp + 80) = rdi # mov qword ptr [rsp + 0x50], rdi
                        0x798ff: ebx += 91 # add ebx, 0x5b
                        0x79902: edi += 124 # add edi, 0x7c
                        0x79905: r12 = r15 + 88 # lea r12, qword ptr [r15 + 0x58]
                        0x79909: *(rsp + 92) = edi # mov dword ptr [rsp + 0x5c], edi
                        0x7990d: *(rsp + 64) = ebx # mov dword ptr [rsp + 0x40], ebx
                        0x79911: *(rsp + 24) = rax # mov qword ptr [rsp + 0x18], rax
                        loop {
                            loop_0x79916:
                            0x79916: ebp = 10000 # mov ebp, 0x2710
                            0x7991b: jmp 0x79967
                            loop {
                                loop_0x79967:
                                0x79967: r14 = *(r15 + 112) # mov r14, qword ptr [r15 + 0x70]
                                # 0x7996b: cmp r14, r12
                                # 0x7996e: je 0x79c39
                                if (r14 == r12)  goto 0x79c39
                                0x79974: rsi = *(r14 + 8) # mov rsi, qword ptr [r14 + 8]
                                0x79978: rbx = *(r14 + 24) # mov rbx, qword ptr [r14 + 0x18]
                                # 0x7997c: cmp rsi, 0x10
                                # 0x79980: jbe 0x79ae0
                                if (rsi (unsigned) > '\x10') {
                                    # 0x79986: cmp rsi, qword ptr [r15 + 0x878]
                                    # 0x7998d: ja 0x79ae0
                                    and if (rsi (unsigned) <= *(r15 + 2168))
                                    goto 0x79993
                                } else {
                                    0x79ae0: edi = *(check_action) # mov edi, dword ptr [rip + 0x32468a]
                                    0x79ae6: rsi = 0x16630d # lea rsi, qword ptr [rip + 0xec820]
                                    0x79aed: rdx = r14 + 16 # lea rdx, qword ptr [r14 + 0x10]
                                    0x79af1: rcx = r15 # mov rcx, r15
                                    0x79af4: call malloc_printerr
                                    0x79af9: rsi = *(r14 + 8) # mov rsi, qword ptr [r14 + 8]
                                    0x79afd: jmp 0x79993
                                }
                                0x79993: rsi &= -8 # and rsi, 0xfffffffffffffff8
                                # 0x79997: cmp r13, 0x3ff
                                # 0x7999e: ja 0x799a9
                                if (r13 (unsigned) <= 1023) {
                                    # 0x799a0: cmp rbx, r12
                                    # 0x799a3: je 0x79b30
                                    and if (rbx == r12)
                                    # 0x79b30: cmp r14, qword ptr [r15 + 0x60]
                                    # 0x79b34: jne 0x799a9
                                    and if (r14 == *(r15 + 96))
                                    # 0x79b3a: cmp rsi, qword ptr [rsp + 0x18]
                                    # 0x79b3f: jbe 0x799a9
                                    if (rsi (unsigned) > *(rsp + 24))  goto 0x79b45
                                }
                                0x799a9: r13 cmp rsi # cmp r13, rsi
                                0x799ac: *(r15 + 112) = rbx # mov qword ptr [r15 + 0x70], rbx
                                0x799b0: *(rbx + 16) = r12 # mov qword ptr [rbx + 0x10], r12
                                # 0x799b4: je 0x79d8f
                                if ==  goto 0x79d8f
                                # 0x799ba: cmp rsi, 0x3ff
                                # 0x799c1: jbe 0x79920
                                if (rsi (unsigned) > 1023) {
                                    0x799c7: rax = rsi # mov rax, rsi
                                    0x799ca: rax >>= 6 # shr rax, 6
                                    # 0x799ce: cmp rax, 0x30
                                    # 0x799d2: ja 0x79a68
                                    if (rax (unsigned) <= '0') {
                                        0x799d8: ecx = rax + 48 # lea ecx, dword ptr [rax + 0x30]
                                        0x799db: eax = rax + rax + 94 # lea eax, dword ptr [rax + rax + 0x5e]
                                    } else {
                                        0x79a68: rax = rsi # mov rax, rsi
                                        0x79a6b: rax >>= 9 # shr rax, 9
                                        # 0x79a6f: cmp rax, 0x14
                                        # 0x79a73: ja 0x79b08
                                        if (rax (unsigned) <= '\x14') {
                                            0x79a79: ecx = rax + 91 # lea ecx, dword ptr [rax + 0x5b]
                                            0x79a7c: eax = rax + rax + 180 # lea eax, dword ptr [rax + rax + 0xb4]
                                            0x79a83: jmp 0x799df
                                        } else {
                                            0x79b08: rax = rsi # mov rax, rsi
                                            0x79b0b: rax >>= 12 # shr rax, 0xc
                                            # 0x79b0f: cmp rax, 0xa
                                            # 0x79b13: ja 0x79bf0
                                            if (rax (unsigned) <= '\n') {
                                                0x79b19: ecx = rax + 110 # lea ecx, dword ptr [rax + 0x6e]
                                                0x79b1c: eax = rax + rax + 218 # lea eax, dword ptr [rax + rax + 0xda]
                                                0x79b23: jmp 0x799df
                                            } else {
                                                0x79bf0: rax = rsi # mov rax, rsi
                                                0x79bf3: rax >>= 15 # shr rax, 0xf
                                                # 0x79bf7: cmp rax, 4
                                                # 0x79bfb: ja 0x79c19
                                                if (rax (unsigned) <= '\x04') {
                                                    0x79bfd: ecx = rax + 119 # lea ecx, dword ptr [rax + 0x77]
                                                    0x79c00: eax = rax + rax + 236 # lea eax, dword ptr [rax + rax + 0xec]
                                                    0x79c07: jmp 0x799df
                                                } else {
                                                    0x79c19: rax = rsi # mov rax, rsi
                                                    0x79c1c: rax >>= 18 # shr rax, 0x12
                                                    # 0x79c20: cmp rax, 2
                                                    # 0x79c24: ja 0x79daf
                                                    if (rax (unsigned) <= '\x02') {
                                                        0x79c2a: ecx = rax + 124 # lea ecx, dword ptr [rax + 0x7c]
                                                        0x79c2d: eax = rax + rax + 246 # lea eax, dword ptr [rax + rax + 0xf6]
                                                        0x79c34: jmp 0x799df
                                                    } else {
                                                        0x79daf: eax = 250 # mov eax, 0xfa
                                                        0x79db4: ecx = 126 # mov ecx, 0x7e
                                                        0x79db9: jmp 0x799df
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    0x799df: rax = eax # cdqe
                                    0x799e1: rax = r15 + (rax*8) + 96 # lea rax, qword ptr [r15 + rax*8 + 0x60]
                                    0x799e6: rdi = rax - 8 # lea rdi, qword ptr [rax - 8]
                                    0x799ea: rdx = rax + 8 # lea rdx, qword ptr [rax + 8]
                                    0x799ee: rax = *(rax + 8) # mov rax, qword ptr [rax + 8]
                                    # 0x799f2: cmp rdi, rax
                                    # 0x799f5: je 0x79be0
                                    if (rdi != rax) {
                                        0x799fb: r8 = *(rdx + 8) # mov r8, qword ptr [rdx + 8]
                                        0x799ff: rsi |= 1 # or rsi, 1
                                        0x79a03: rdx = *(r8 + 8) # mov rdx, qword ptr [r8 + 8]
                                        0x79a07: test dl, '\x04'
                                        # 0x79a0a: jne 0x7a1b2
                                        if !=  goto 0x7a1b2
                                        # 0x79a10: cmp rsi, rdx
                                        # 0x79a13: jae 0x79a90
                                        if (rsi (unsigned) < rdx) {
                                            0x79a15: rdx = *(rax + 40) # mov rdx, qword ptr [rax + 0x28]
                                            0x79a19: *(r14 + 32) = rax # mov qword ptr [r14 + 0x20], rax
                                            0x79a1d: *(r14 + 40) = rdx # mov qword ptr [r14 + 0x28], rdx
                                            0x79a21: *(rdx + 32) = r14 # mov qword ptr [rdx + 0x20], r14
                                            0x79a25: *(rax + 40) = r14 # mov qword ptr [rax + 0x28], r14
                                            0x79a29: jmp 0x79938
                                        } else {
                                            0x79a90: rdx = *(rax + 8) # mov rdx, qword ptr [rax + 8]
                                            0x79a94: test dl, '\x04'
                                            # 0x79a97: je 0x79ab1
                                            if !=  goto 0x79a99
                                            loop {
                                                loop_0x79ab1:
                                                # 0x79ab1: cmp rsi, rdx
                                                # 0x79ab4: jb 0x79aa0
                                                if (rsi (unsigned) >= rdx)  goto 0x79ab6
                                                0x79aa0: rax = *(rax + 32) # mov rax, qword ptr [rax + 0x20]
                                                0x79aa4: rdx = *(rax + 8) # mov rdx, qword ptr [rax + 8]
                                                0x79aa8: test dl, '\x04'
                                                # 0x79aab: jne 0x7a01c
                                                if !=  goto 0x7a01c
                                            }
                                            # 0x79ab6: je 0x79c10
                                            if != {
                                                0x79abc: rdx = *(rax + 40) # mov rdx, qword ptr [rax + 0x28]
                                                0x79ac0: *(r14 + 32) = rax # mov qword ptr [r14 + 0x20], rax
                                                0x79ac4: rdi = rax # mov rdi, rax
                                                0x79ac7: *(r14 + 40) = rdx # mov qword ptr [r14 + 0x28], rdx
                                                0x79acb: *(rax + 40) = r14 # mov qword ptr [rax + 0x28], r14
                                                0x79acf: rdx = *(r14 + 40) # mov rdx, qword ptr [r14 + 0x28]
                                                0x79ad3: *(rdx + 32) = r14 # mov qword ptr [rdx + 0x20], r14
                                            } else {
                                                0x79c10: rdi = *(rax + 16) # mov rdi, qword ptr [rax + 0x10]
                                                0x79c14: jmp 0x79ad7
                                            }
                                            0x79ad7: r8 = *(rdi + 24) # mov r8, qword ptr [rdi + 0x18]
                                            0x79adb: jmp 0x79938
                                        }
                                    } else {
                                        0x79be0: *(r14 + 40) = r14 # mov qword ptr [r14 + 0x28], r14
                                        0x79be4: *(r14 + 32) = r14 # mov qword ptr [r14 + 0x20], r14
                                        0x79be8: r8 = rdi # mov r8, rdi
                                        0x79beb: jmp 0x79938
                                    }
                                } else {
                                    0x79920: ecx = esi # mov ecx, esi
                                    0x79922: ecx >>= 4 # shr ecx, 4
                                    0x79925: eax = rcx + rcx - 2 # lea eax, dword ptr [rcx + rcx - 2]
                                    0x79929: rax = eax # cdqe
                                    0x7992b: rax = r15 + (rax*8) + 96 # lea rax, qword ptr [r15 + rax*8 + 0x60]
                                    0x79930: rdi = *(rax + 8) # mov rdi, qword ptr [rax + 8]
                                    0x79934: r8 = rax - 8 # lea r8, qword ptr [rax - 8]
                                }
                                0x79938: eax = ecx # mov eax, ecx
                                0x7993a: edx = 1 # mov edx, 1
                                0x7993f: eax >>= 5 # sar eax, 5
                                0x79942: edx <<= cl # shl edx, cl
                                0x79944: rax = eax # cdqe
                                0x79946: *(r15 + (rax*4) + 2136) |= edx # or dword ptr [r15 + rax*4 + 0x858], edx
                                0x7994e: ebp -= 1 # sub ebp, 1
                                0x79951: *(r14 + 24) = r8 # mov qword ptr [r14 + 0x18], r8
                                0x79955: *(r14 + 16) = rdi # mov qword ptr [r14 + 0x10], rdi
                                0x79959: *(rdi + 24) = r14 # mov qword ptr [rdi + 0x18], r14
                                0x7995d: *(r8 + 16) = r14 # mov qword ptr [r8 + 0x10], r14
                                # 0x79961: je 0x79c39
                                if ==  goto 0x79c39
                            }
                            # 0x79c39: cmp r13, 0x3ff
                            # 0x79c40: ja 0x79dbe
                            if (r13 (unsigned) > 1023) {
                                0x79dbe: eax = *(rsp + 8) # mov eax, dword ptr [rsp + 8]
                                0x79dc2: eax = rax + rax - 2 # lea eax, dword ptr [rax + rax - 2]
                                0x79dc6: rax = r15 + (rax*8) + 96 # lea rax, qword ptr [r15 + rax*8 + 0x60]
                                0x79dcb: rdx = *(rax + 8) # mov rdx, qword ptr [rax + 8]
                                0x79dcf: rcx = rax + 8 # lea rcx, qword ptr [rax + 8]
                                0x79dd3: rax -= 8 # sub rax, 8
                                # 0x79dd7: cmp rdx, rax
                                # 0x79dda: je 0x79c46
                                if (rdx != rax) {
                                    # 0x79de0: cmp r13, qword ptr [rdx + 8]
                                    # 0x79de4: ja 0x79c46
                                    if (r13 (unsigned) <= *(rdx + 8))  goto 0x79dea
                                }
                            }
                            0x79c46: eax = *(rsp + 8) # mov eax, dword ptr [rsp + 8]
                            0x79c4a: ecx = rax + 1 # lea ecx, dword ptr [rax + 1]
                            0x79c4d: eax += eax # add eax, eax
                            0x79c4f: rdx = r15 + (rax*8) + 88 # lea rdx, qword ptr [r15 + rax*8 + 0x58]
                            0x79c54: eax = 1 # mov eax, 1
                            0x79c59: edi = ecx # mov edi, ecx
                            0x79c5b: eax <<= cl # shl eax, cl
                            0x79c5d: edi >>= 5 # shr edi, 5
                            0x79c60: r8d = edi # mov r8d, edi
                            0x79c63: esi = *(r15 + (r8*4) + 2136) # mov esi, dword ptr [r15 + r8*4 + 0x858]
                            loop {
                                loop_0x79c6b:
                                # 0x79c6b: cmp eax, esi
                                # 0x79c6d: ja 0x79cc3
                                if (eax (unsigned) <= esi) {
                                    # 0x79c6f: test eax, eax
                                    # 0x79c71: jne 0x79c84
                                    if (eax == 0) {
                                        0x79c73: jmp 0x79cc3
                                    } else {
                                        goto loop_0x79c84
                                    }
                                }
                                loop {
                                    loop_0x79cc3:
                                    0x79cc3: edi += 1 # add edi, 1
                                    # 0x79cc6: cmp edi, 3
                                    # 0x79cc9: jbe 0x79cb0
                                    if (edi (unsigned) > '\x03')  goto 0x79ccb
                                    0x79cb0: r8d = edi # mov r8d, edi
                                    0x79cb3: esi = *(r15 + (r8*4) + 2136) # mov esi, dword ptr [r15 + r8*4 + 0x858]
                                    # 0x79cbb: test esi, esi
                                    # 0x79cbd: jne 0x79d78
                                    if (esi != 0)  goto 0x79d78
                                }
                                0x79d78: eax = edi # mov eax, edi
                                0x79d7a: eax <<= 6 # shl eax, 6
                                0x79d7d: eax -= 2 # sub eax, 2
                                0x79d80: rdx = r15 + (rax*8) + 88 # lea rdx, qword ptr [r15 + rax*8 + 0x58]
                                0x79d85: eax = 1 # mov eax, 1
                                0x79d8a: jmp 0x79c84
                                loop {
                                    loop_0x79c84:
                                    0x79c84: test esi, eax
                                    # 0x79c86: je 0x79c78
                                    if !=  goto 0x79c88
                                    0x79c78: rdx += 16 # add rdx, 0x10
                                    0x79c7c: eax += eax # add eax, eax
                                    # 0x79c7e: je 0x7a138
                                    if ==  goto 0x7a138
                                }
                                0x79c88: r14 = *(rdx + 24) # mov r14, qword ptr [rdx + 0x18]
                                # 0x79c8c: cmp rdx, r14
                                # 0x79c8f: jne 0x79f91
                                if (rdx != r14)  goto 0x79f91
                                0x79c95: ecx = eax # mov ecx, eax
                                0x79c97: rdx += 16 # add rdx, 0x10
                                0x79c9b: eax += eax # add eax, eax
                                0x79c9d: ecx ^= -1 # not ecx
                                0x79c9f: esi &= ecx # and esi, ecx
                                0x79ca1: *(r15 + (r8*4) + 2136) = esi # mov dword ptr [r15 + r8*4 + 0x858], esi
                                0x79ca9: jmp 0x79c6b
                            }
                            0x79ccb: rdx = *(r15 + 88) # mov rdx, qword ptr [r15 + 0x58]
                            0x79ccf: rax = *(rdx + 8) # mov rax, qword ptr [rdx + 8]
                            0x79cd3: rax &= -8 # and rax, 0xfffffffffffffff8
                            # 0x79cd7: cmp rax, qword ptr [rsp + 0x18]
                            # 0x79cdc: jae 0x7a0e7
                            if (rax (unsigned) >= *(rsp + 24))  goto 0x7a0e7
                            0x79ce2: test *(r15 + 4), '\x01' # test byte ptr [r15 + 4], 1
                            # 0x79ce7: jne 0x7a09b
                            if !=  goto 0x7a09b
                            0x79ced: rdi = r15 # mov rdi, r15
                            0x79cf0: call malloc_consolidate
                            0x79cf5: eax = *(rsp + 40) # mov eax, dword ptr [rsp + 0x28]
                            0x79cf9: r13 cmp 1023 # cmp r13, 0x3ff
                            0x79d00: *(rsp + 8) = eax # mov dword ptr [rsp + 8], eax
                            # 0x79d04: jbe 0x79916
                            if (unsigned) > {
                                0x79d0a: *(rsp + 32) cmp 48 # cmp qword ptr [rsp + 0x20], 0x30
                                0x79d10: eax = *(rsp + 44) # mov eax, dword ptr [rsp + 0x2c]
                                0x79d14: *(rsp + 8) = eax # mov dword ptr [rsp + 8], eax
                                # 0x79d18: jbe 0x79916
                                and if (unsigned) >
                                0x79d1e: *(rsp + 48) cmp 20 # cmp qword ptr [rsp + 0x30], 0x14
                                0x79d24: eax = *(rsp + 64) # mov eax, dword ptr [rsp + 0x40]
                                0x79d28: *(rsp + 8) = eax # mov dword ptr [rsp + 8], eax
                                # 0x79d2c: jbe 0x79916
                                and if (unsigned) >
                                0x79d32: *(rsp + 56) cmp 10 # cmp qword ptr [rsp + 0x38], 0xa
                                0x79d38: eax = *(rsp + 68) # mov eax, dword ptr [rsp + 0x44]
                                0x79d3c: *(rsp + 8) = eax # mov dword ptr [rsp + 8], eax
                                # 0x79d40: jbe 0x79916
                                and if (unsigned) >
                                0x79d46: *(rsp + 72) cmp 4 # cmp qword ptr [rsp + 0x48], 4
                                0x79d4c: eax = *(rsp + 88) # mov eax, dword ptr [rsp + 0x58]
                                0x79d50: *(rsp + 8) = eax # mov dword ptr [rsp + 8], eax
                                # 0x79d54: jbe 0x79916
                                and if (unsigned) >
                                0x79d5a: *(rsp + 80) cmp 2 # cmp qword ptr [rsp + 0x50], 2
                                0x79d60: ebx = 126 # mov ebx, 0x7e
                                0x79d65: cmovbe ebx, *(rsp + 92) # cmovbe ebx, dword ptr [rsp + 0x5c]
                                0x79d6a: *(rsp + 8) = ebx # mov dword ptr [rsp + 8], ebx
                                0x79d6e: jmp 0x79916
                            }
                        }
                        0x79b45: rdx = rsi # mov rdx, rsi
                        0x79b48: rax = r14 + r13 # lea rax, qword ptr [r14 + r13]
                        0x79b4c: rdx -= r13 # sub rdx, r13
                        0x79b4f: rdx cmp 1023 # cmp rdx, 0x3ff
                        0x79b56: *(r15 + 104) = rax # mov qword ptr [r15 + 0x68], rax
                        0x79b5a: *(r15 + 112) = rax # mov qword ptr [r15 + 0x70], rax
                        0x79b5e: *(r15 + 96) = rax # mov qword ptr [r15 + 0x60], rax
                        0x79b62: *(rax + 16) = r12 # mov qword ptr [rax + 0x10], r12
                        0x79b66: *(rax + 24) = r12 # mov qword ptr [rax + 0x18], r12
                        # 0x79b6a: jbe 0x79b7c
                        if (unsigned) > {
                            0x79b6c: *(rax + 32) = 0 # mov qword ptr [rax + 0x20], 0
                            0x79b74: *(rax + 40) = 0 # mov qword ptr [rax + 0x28], 0
                        }
                        0x79b7c: rcx = main_arena # lea rcx, qword ptr [rip + 0x324fbd]
                        0x79b83: r9 = r13 # mov r9, r13
                        0x79b86: r15 cmp rcx # cmp r15, rcx
                        0x79b89: setne cl
                        0x79b8c: r9 |= 1 # or r9, 1
                        0x79b90: ecx = (zero ext) cl # movzx ecx, cl
                        0x79b93: rcx <<= 2 # shl rcx, 2
                        0x79b97: rcx |= r9 # or rcx, r9
                        0x79b9a: *(r14 + 8) = rcx # mov qword ptr [r14 + 8], rcx
                        0x79b9e: rcx = rdx # mov rcx, rdx
                        0x79ba1: rcx |= 1 # or rcx, 1
                        0x79ba5: *(rax + 8) = rcx # mov qword ptr [rax + 8], rcx
                        0x79ba9: *(rax + rdx) = rdx # mov qword ptr [rax + rdx], rdx
                        0x79bad: rcx = r14 + 16 # lea rcx, qword ptr [r14 + 0x10]
                        0x79bb1: eax = *(perturb_byte) # mov eax, dword ptr [rip + 0x326ca5]
                        # 0x79bb7: test eax, eax
                        # 0x79bb9: je 0x79a52
                        if (eax != 0) {
                            0x79bbf: rdx = *(rsp + 16) # mov rdx, qword ptr [rsp + 0x10]
                            0x79bc4: al ^= '\xff' # xor al, 0xff
                            0x79bc6: rdi = rcx # mov rdi, rcx
                            0x79bc9: esi = eax # mov esi, eax
                            0x79bcb: call __memset_sse2
                            0x79bd0: rcx = rax # mov rcx, rax
                            0x79bd3: jmp 0x79a52
                        }
                        goto ret_0x79a52
                        0x7a01c: rcx = 0x16ae88 # lea rcx, qword ptr [rip + 0xf0e65]
                        0x7a023: rsi = 0x166204 # lea rsi, qword ptr [rip + 0xec1da]
                        0x7a02a: rdi = 0x166344 # lea rdi, qword ptr [rip + 0xec313]
                        0x7a031: edx = 3561 # mov edx, 0xde9
                        0x7a036: call __malloc_assert
                        goto 0x7a03b
                        0x79a99: jmp 0x7a1d1
                        0x7a1b2: rcx = 0x16ae88 # lea rcx, qword ptr [rip + 0xf0ccf]
                        0x7a1b9: rsi = 0x166204 # lea rsi, qword ptr [rip + 0xec044]
                        0x7a1c0: rdi = 0x166329 # lea rdi, qword ptr [rip + 0xec162]
                        0x7a1c7: edx = 3545 # mov edx, 0xdd9
                        0x7a1cc: call __malloc_assert
                        0x7a1d1: rcx = 0x16ae88 # lea rcx, qword ptr [rip + 0xf0cb0]
                        0x7a1d8: rsi = 0x166204 # lea rsi, qword ptr [rip + 0xec025]
                        0x7a1df: rdi = 0x166344 # lea rdi, qword ptr [rip + 0xec15e]
                        0x7a1e6: edx = 3557 # mov edx, 0xde5
                        0x7a1eb: call __malloc_assert
                        goto 0x7a1f0
                        0x79d8f: rax = main_arena # lea rax, qword ptr [rip + 0x324daa]
                        0x79d96: *(r14 + r13 + 8) |= 1 # or qword ptr [r14 + r13 + 8], 1
                        # 0x79d9c: cmp r15, rax
                        # 0x79d9f: je 0x79a40
                        if (r15 != rax) {
                            0x79da5: *(r14 + 8) |= 4 # or qword ptr [r14 + 8], 4
                            0x79daa: jmp 0x79a40
                        }
                        goto 0x79a40
                        0x79dea: r14 = *(rdx + 40) # mov r14, qword ptr [rdx + 0x28]
                        0x79dee: jmp 0x79df4
                        loop {
                            loop_0x79df4:
                            0x79df4: rax = *(r14 + 8) # mov rax, qword ptr [r14 + 8]
                            0x79df8: r8 = rax # mov r8, rax
                            0x79dfb: r8 &= -8 # and r8, 0xfffffffffffffff8
                            # 0x79dff: cmp r13, r8
                            # 0x79e02: ja 0x79df0
                            if (r13 (unsigned) <= r8)  goto 0x79e04
                            0x79df0: r14 = *(r14 + 40) # mov r14, qword ptr [r14 + 0x28]
                        }
                        0x79e04: r14 cmp *(rcx + 8) # cmp r14, qword ptr [rcx + 8]
                        0x79e08: rbp = *(r14 + 16) # mov rbp, qword ptr [r14 + 0x10]
                        # 0x79e0c: je 0x79e1e
                        if != {
                            0x79e0e: var5 cmp rax # cmp qword ptr [rbp + 8], rax
                            0x79e12: rdx = rbp # mov rdx, rbp
                            # 0x79e15: jne 0x79e1e
                            and if ==
                            0x79e17: rbp = var6 # mov rbp, qword ptr [rbp + 0x10]
                            0x79e1b: r14 = rdx # mov r14, rdx
                        }
                        0x79e1e: rbx = r8 # mov rbx, r8
                        0x79e21: rax = *(r14 + 24) # mov rax, qword ptr [r14 + 0x18]
                        0x79e25: rbx -= r13 # sub rbx, r13
                        # 0x79e28: cmp r14, qword ptr [rbp + 0x18]
                        # 0x79e2c: jne 0x7a157
                        if (r14 == var7) {
                            # 0x79e32: cmp r14, qword ptr [rax + 0x10]
                            # 0x79e36: jne 0x7a157
                            and if (r14 == *(rax + 16))
                            0x79e3c: *(r14 + 8) cmp 1023 # cmp qword ptr [r14 + 8], 0x3ff
                            0x79e44: var7 = rax # mov qword ptr [rbp + 0x18], rax
                            0x79e48: *(rax + 16) = rbp # mov qword ptr [rax + 0x10], rbp
                            # 0x79e4c: jbe 0x79e5b
                            if (unsigned) > {
                                0x79e4e: rax = *(r14 + 32) # mov rax, qword ptr [r14 + 0x20]
                                # 0x79e52: test rax, rax
                                # 0x79e55: jne 0x7a17e
                                and if (rax != 0)
                                # 0x7a17e: cmp r14, qword ptr [rax + 0x28]
                                # 0x7a182: jne 0x7a216
                                if (r14 == *(rax + 40)) {
                                    0x7a188: rdx = *(r14 + 40) # mov rdx, qword ptr [r14 + 0x28]
                                    # 0x7a18c: cmp r14, qword ptr [rdx + 0x20]
                                    # 0x7a190: jne 0x7a216
                                    and if (r14 == *(rdx + 32))
                                    goto 0x7a196
                                } else {
                                    0x7a216: edi = *(check_action) # mov edi, dword ptr [rip + 0x323f54]
                                    0x7a21c: rsi = 0x169e58 # lea rsi, qword ptr [rip + 0xefc35]
                                    0x7a223: rcx = r15 # mov rcx, r15
                                    0x7a226: rdx = r14 # mov rdx, r14
                                    0x7a229: *(rsp + 8) = r8 # mov qword ptr [rsp + 8], r8
                                    0x7a22e: call malloc_printerr
                                    0x7a233: rax = *(r14 + 32) # mov rax, qword ptr [r14 + 0x20]
                                    0x7a237: r8 = *(rsp + 8) # mov r8, qword ptr [rsp + 8]
                                    0x7a23c: jmp 0x7a196
                                }
                                # 0x7a196: cmp qword ptr [rbp + 0x20], 0
                                # 0x7a19b: je 0x7a1f0
                                if (var8 != 0) {
                                    0x7a19d: rdx = *(r14 + 40) # mov rdx, qword ptr [r14 + 0x28]
                                    0x7a1a1: *(rax + 40) = rdx # mov qword ptr [rax + 0x28], rdx
                                    0x7a1a5: rdx = *(r14 + 40) # mov rdx, qword ptr [r14 + 0x28]
                                    0x7a1a9: *(rdx + 32) = rax # mov qword ptr [rdx + 0x20], rax
                                    0x7a1ad: jmp 0x79e5b
                                } else {
                                    goto 0x7a1f0
                                }
                            }
                        } else {
                            goto 0x7a157
                        }
                        goto 0x79e5b
                        # 0x7a1f0: cmp r14, rax
                        # 0x7a1f3: je 0x7a241
                        if (r14 != rax) {
                            0x7a1f5: var8 = rax # mov qword ptr [rbp + 0x20], rax
                            0x7a1f9: rax = *(r14 + 40) # mov rax, qword ptr [r14 + 0x28]
                            0x7a1fd: var9 = rax # mov qword ptr [rbp + 0x28], rax
                            0x7a201: rax = *(r14 + 32) # mov rax, qword ptr [r14 + 0x20]
                            0x7a205: *(rax + 40) = rbp # mov qword ptr [rax + 0x28], rbp
                            0x7a209: rax = *(r14 + 40) # mov rax, qword ptr [r14 + 0x28]
                            0x7a20d: *(rax + 32) = rbp # mov qword ptr [rax + 0x20], rbp
                            0x7a211: jmp 0x79e5b
                        } else {
                            0x7a241: var9 = rbp # mov qword ptr [rbp + 0x28], rbp
                            0x7a245: var8 = rbp # mov qword ptr [rbp + 0x20], rbp
                            0x7a249: jmp 0x79e5b
                        }
                        goto 0x79e5b
                        0x7a138: rcx = 0x16ae88 # lea rcx, qword ptr [rip + 0xf0d49]
                        0x7a13f: rsi = 0x166204 # lea rsi, qword ptr [rip + 0xec0be]
                        0x7a146: rdi = 0x16635b # lea rdi, qword ptr [rip + 0xec20e]
                        0x7a14d: edx = 3697 # mov edx, 0xe71
                        0x7a152: call __malloc_assert
                        0x7a157: edi = *(check_action) # mov edi, dword ptr [rip + 0x324013]
                        0x7a15d: rsi = 0x166242 # lea rsi, qword ptr [rip + 0xec0de]
                        0x7a164: rcx = r15 # mov rcx, r15
                        0x7a167: rdx = r14 # mov rdx, r14
                        0x7a16a: *(rsp + 8) = r8 # mov qword ptr [rsp + 8], r8
                        0x7a16f: call malloc_printerr
                        0x7a174: r8 = *(rsp + 8) # mov r8, qword ptr [rsp + 8]
                        0x7a179: jmp 0x79e5b
                        # 0x79e5b: cmp rbx, 0x1f
                        # 0x79e5f: jbe 0x79fee
                        if (rbx (unsigned) > '\x1f') {
                            0x79e65: rdx = *(r15 + 104) # mov rdx, qword ptr [r15 + 0x68]
                            0x79e69: rax = r14 + r13 # lea rax, qword ptr [r14 + r13]
                            # 0x79e6d: cmp qword ptr [rdx + 0x18], r12
                            # 0x79e71: jne 0x7a24e
                            if (*(rdx + 24) == r12) {
                                0x79e77: rbx cmp 1023 # cmp rbx, 0x3ff
                                0x79e7e: *(rax + 24) = r12 # mov qword ptr [rax + 0x18], r12
                                0x79e82: *(rax + 16) = rdx # mov qword ptr [rax + 0x10], rdx
                                0x79e86: *(r15 + 104) = rax # mov qword ptr [r15 + 0x68], rax
                                0x79e8a: *(rdx + 24) = rax # mov qword ptr [rdx + 0x18], rax
                                # 0x79e8e: jbe 0x79ea0
                                if (unsigned) > {
                                    goto 0x79e90
                                }
                            } else {
                                0x7a24e: rsi = 0x16a4a8 # lea rsi, qword ptr [rip + 0xf0253]
                                0x7a255: jmp 0x79f42
                            }
                        } else {
                            0x79fee: rax = main_arena # lea rax, qword ptr [rip + 0x324b4b]
                            0x79ff5: *(r14 + r8 + 8) |= 1 # or qword ptr [r14 + r8 + 8], 1
                            # 0x79ffb: cmp r15, rax
                            # 0x79ffe: jne 0x7985e
                            if (r15 == rax) {
                                0x7a004: jmp 0x79a40
                            } else {
                                0x7985e: *(r14 + 8) |= 4 # or qword ptr [r14 + 8], 4
                                0x79863: jmp 0x79a40
                            }
                            goto 0x79a40
                        }
                        goto 0x79ea0
                        0x79f91: rdx = *(r14 + 8) # mov rdx, qword ptr [r14 + 8]
                        0x79f95: r8 = rdx # mov r8, rdx
                        0x79f98: r8 &= -8 # and r8, 0xfffffffffffffff8
                        # 0x79f9c: cmp r13, r8
                        # 0x79f9f: ja 0x7a266
                        if (r13 (unsigned) <= r8) {
                            0x79fa5: rbp = *(r14 + 16) # mov rbp, qword ptr [r14 + 0x10]
                            0x79fa9: rbx = r8 # mov rbx, r8
                            0x79fac: rax = *(r14 + 24) # mov rax, qword ptr [r14 + 0x18]
                            0x79fb0: rbx -= r13 # sub rbx, r13
                            0x79fb3: r9 = var7 # mov r9, qword ptr [rbp + 0x18]
                            # 0x79fb7: cmp r14, r9
                            # 0x79fba: jne 0x7a0c0
                            if (r14 == r9) {
                                # 0x79fc0: cmp r14, qword ptr [rax + 0x10]
                                # 0x79fc4: jne 0x7a0c0
                                and if (r14 == *(rax + 16))
                                0x79fca: rdx cmp 1023 # cmp rdx, 0x3ff
                                0x79fd1: var7 = rax # mov qword ptr [rbp + 0x18], rax
                                0x79fd5: *(rax + 16) = rbp # mov qword ptr [rax + 0x10], rbp
                                # 0x79fd9: jbe 0x79fe8
                                if (unsigned) > {
                                    0x79fdb: rax = *(r14 + 32) # mov rax, qword ptr [r14 + 0x20]
                                    # 0x79fdf: test rax, rax
                                    # 0x79fe2: jne 0x7a285
                                    and if (rax != 0)
                                    goto 0x7a285
                                }
                            } else {
                                0x7a0c0: edi = *(check_action) # mov edi, dword ptr [rip + 0x3240aa]
                                0x7a0c6: rsi = 0x166242 # lea rsi, qword ptr [rip + 0xec175]
                                0x7a0cd: rcx = r15 # mov rcx, r15
                                0x7a0d0: rdx = r14 # mov rdx, r14
                                0x7a0d3: *(rsp + 8) = r8 # mov qword ptr [rsp + 8], r8
                                0x7a0d8: call malloc_printerr
                                0x7a0dd: r8 = *(rsp + 8) # mov r8, qword ptr [rsp + 8]
                                0x7a0e2: jmp 0x79fe8
                            }
                        } else {
                            0x7a266: rcx = 0x16ae88 # lea rcx, qword ptr [rip + 0xf0c1b]
                            0x7a26d: rsi = 0x166204 # lea rsi, qword ptr [rip + 0xebf90]
                            0x7a274: rdi = 0x16a4f8 # lea rdi, qword ptr [rip + 0xf027d]
                            0x7a27b: edx = 3716 # mov edx, 0xe84
                            0x7a280: call __malloc_assert
                            # 0x7a285: cmp r14, qword ptr [rax + 0x28]
                            # 0x7a289: jne 0x7a2b1
                            if (r14 == *(rax + 40)) {
                                0x7a28b: rdx = *(r14 + 40) # mov rdx, qword ptr [r14 + 0x28]
                                # 0x7a28f: cmp r14, qword ptr [rdx + 0x20]
                                # 0x7a293: jne 0x7a2b1
                                and if (r14 == *(rdx + 32))
                                goto 0x7a295
                            } else {
                                0x7a2b1: edi = *(check_action) # mov edi, dword ptr [rip + 0x323eb9]
                                0x7a2b7: rsi = 0x169e58 # lea rsi, qword ptr [rip + 0xefb9a]
                                0x7a2be: rdx = r9 # mov rdx, r9
                                0x7a2c1: rcx = r15 # mov rcx, r15
                                0x7a2c4: *(rsp + 24) = r8 # mov qword ptr [rsp + 0x18], r8
                                0x7a2c9: *(rsp + 8) = r9 # mov qword ptr [rsp + 8], r9
                                0x7a2ce: call malloc_printerr
                                0x7a2d3: r9 = *(rsp + 8) # mov r9, qword ptr [rsp + 8]
                                0x7a2d8: r8 = *(rsp + 24) # mov r8, qword ptr [rsp + 0x18]
                                0x7a2dd: rax = *(r9 + 32) # mov rax, qword ptr [r9 + 0x20]
                                0x7a2e1: jmp 0x7a295
                            }
                            # 0x7a295: cmp qword ptr [rbp + 0x20], 0
                            # 0x7a29a: je 0x7a2e3
                            if (var8 != 0) {
                                0x7a29c: rdx = *(r9 + 40) # mov rdx, qword ptr [r9 + 0x28]
                                0x7a2a0: *(rax + 40) = rdx # mov qword ptr [rax + 0x28], rdx
                                0x7a2a4: rdx = *(r9 + 40) # mov rdx, qword ptr [r9 + 0x28]
                                0x7a2a8: *(rdx + 32) = rax # mov qword ptr [rdx + 0x20], rax
                                0x7a2ac: jmp 0x79fe8
                            }
                            # 0x7a2e3: cmp r9, rax
                            # 0x7a2e6: je 0x7a309
                            else if (r9 != rax) {
                                0x7a2e8: var8 = rax # mov qword ptr [rbp + 0x20], rax
                                0x7a2ec: rax = *(r9 + 40) # mov rax, qword ptr [r9 + 0x28]
                                0x7a2f0: var9 = rax # mov qword ptr [rbp + 0x28], rax
                                0x7a2f4: rax = *(r9 + 32) # mov rax, qword ptr [r9 + 0x20]
                                0x7a2f8: *(rax + 40) = rbp # mov qword ptr [rax + 0x28], rbp
                                0x7a2fc: rax = *(r9 + 40) # mov rax, qword ptr [r9 + 0x28]
                                0x7a300: *(rax + 32) = rbp # mov qword ptr [rax + 0x20], rbp
                                0x7a304: jmp 0x79fe8
                            } else {
                                0x7a309: var9 = rbp # mov qword ptr [rbp + 0x28], rbp
                                0x7a30d: var8 = rbp # mov qword ptr [rbp + 0x20], rbp
                                0x7a311: jmp 0x79fe8
                            }
                        }
                        # 0x79fe8: cmp rbx, 0x1f
                        # 0x79fec: ja 0x7a03b
                        if (rbx (unsigned) <= '\x1f') {
                            goto 0x79fee
                        }
                        0x7a03b: rdx = *(r15 + 104) # mov rdx, qword ptr [r15 + 0x68]
                        # 0x7a03f: cmp qword ptr [rdx + 0x18], r12
                        # 0x7a043: jne 0x7a25a
                        if (*(rdx + 24) == r12) {
                            0x7a049: rax = r14 + r13 # lea rax, qword ptr [r14 + r13]
                            0x7a04d: r13 cmp 1023 # cmp r13, 0x3ff
                            0x7a054: *(rax + 24) = r12 # mov qword ptr [rax + 0x18], r12
                            0x7a058: *(rax + 16) = rdx # mov qword ptr [rax + 0x10], rdx
                            0x7a05c: *(r15 + 104) = rax # mov qword ptr [r15 + 0x68], rax
                            0x7a060: *(rdx + 24) = rax # mov qword ptr [rdx + 0x18], rax
                            # 0x7a064: ja 0x7a06a
                            if (unsigned) <= {
                                0x7a066: *(r15 + 96) = rax # mov qword ptr [r15 + 0x60], rax
                            }
                            # 0x7a06a: cmp rbx, 0x3ff
                            # 0x7a071: jbe 0x79ea0
                            if (rbx (unsigned) > 1023) {
                                0x7a077: jmp 0x79e90
                                0x79e90: *(rax + 32) = 0 # mov qword ptr [rax + 0x20], 0
                                0x79e98: *(rax + 40) = 0 # mov qword ptr [rax + 0x28], 0
                            }
                        } else {
                            0x7a25a: rsi = 0x16a4d0 # lea rsi, qword ptr [rip + 0xf026f]
                            0x7a261: jmp 0x79f42
                        }
                        0x79ea0: rdx = main_arena # lea rdx, qword ptr [rip + 0x324c99]
                        0x79ea7: r9 = r13 # mov r9, r13
                        0x79eaa: r15 cmp rdx # cmp r15, rdx
                        0x79ead: setne dl
                        0x79eb0: r9 |= 1 # or r9, 1
                        0x79eb4: edx = (zero ext) dl # movzx edx, dl
                        0x79eb7: rdx <<= 2 # shl rdx, 2
                        0x79ebb: rdx |= r9 # or rdx, r9
                        0x79ebe: *(r14 + 8) = rdx # mov qword ptr [r14 + 8], rdx
                        0x79ec2: rdx = rbx # mov rdx, rbx
                        0x79ec5: rdx |= 1 # or rdx, 1
                        0x79ec9: *(rax + 8) = rdx # mov qword ptr [rax + 8], rdx
                        0x79ecd: *(rax + rbx) = rbx # mov qword ptr [rax + rbx], rbx
                        0x79ed1: jmp 0x79a40
                        0x7a09b: rsi = r15 # mov rsi, r15
                        0x7a09e: rdi = r13 # mov rdi, r13
                        0x7a0a1: call sysmalloc
                        # 0x7a0a6: test rax, rax
                        # 0x7a0a9: jne 0x79f0f
                        if (rax == 0) {
                            0x7a0af: ecx = 0 # xor ecx, ecx
                            0x7a0b1: jmp 0x79a52
                        } else {
                            goto 0x79f0f
                        }
                        goto ret_0x79a52
                        0x7a0e7: rcx = main_arena # lea rcx, qword ptr [rip + 0x324a52]
                        0x7a0ee: rax -= r13 # sub rax, r13
                        0x7a0f1: r9 = r13 # mov r9, r13
                        0x7a0f4: rsi = rdx + r13 # lea rsi, qword ptr [rdx + r13]
                        0x7a0f8: r15 cmp rcx # cmp r15, rcx
                        0x7a0fb: setne cl
                        0x7a0fe: r9 |= 1 # or r9, 1
                        0x7a102: rax |= 1 # or rax, 1
                        0x7a106: ecx = (zero ext) cl # movzx ecx, cl
                        0x7a109: *(r15 + 88) = rsi # mov qword ptr [r15 + 0x58], rsi
                        0x7a10d: rcx <<= 2 # shl rcx, 2
                        0x7a111: rcx |= r9 # or rcx, r9
                        0x7a114: *(rdx + 8) = rcx # mov qword ptr [rdx + 8], rcx
                        0x7a118: *(rsi + 8) = rax # mov qword ptr [rsi + 8], rax
                        0x7a11c: rcx = rdx + 16 # lea rcx, qword ptr [rdx + 0x10]
                        0x7a120: eax = *(perturb_byte) # mov eax, dword ptr [rip + 0x326736]
                        # 0x7a126: test eax, eax
                        # 0x7a128: je 0x79a52
                        if (eax != 0) {
                            0x7a12e: jmp 0x79bbf
                        }
                        goto ret_0x79a52
                        0x79a40: eax = *(perturb_byte) # mov eax, dword ptr [rip + 0x326e16]
                        0x79a46: rcx = r14 + 16 # lea rcx, qword ptr [r14 + 0x10]
                        # 0x79a4a: test eax, eax
                        # 0x79a4c: jne 0x79bbf
                        if (eax != 0) {
                            goto 0x79bbf
                        }
                        goto ret_0x79a52
                    }
                    0x79f00: esi = 0 # xor esi, esi
                    0x79f02: rdi = rax # mov rdi, rax
                    0x79f05: call sysmalloc
                    # 0x79f0a: test rax, rax
                    # 0x79f0d: je 0x79f54
                    if (rax != 0) {
                        0x79f0f: edx = *(perturb_byte) # mov edx, dword ptr [rip + 0x326947]
                        0x79f15: rcx = rax # mov rcx, rax
                        # 0x79f18: test edx, edx
                        # 0x79f1a: je 0x79a52
                        if (edx != 0) {
                            0x79f20: esi = edx # mov esi, edx
                            0x79f22: rdx = *(rsp + 16) # mov rdx, qword ptr [rsp + 0x10]
                            0x79f27: rdi = rax # mov rdi, rax
                            0x79f2a: sil ^= '\xff' # xor sil, 0xff
                            0x79f2e: call __memset_sse2
                            0x79f33: rcx = rax # mov rcx, rax
                            0x79f36: jmp 0x79a52
                        }
                        goto ret_0x79a52
                    }
                    0x79f54: ecx = 0 # xor ecx, ecx
                    0x79f56: jmp 0x79a52
                    ret_0x79a52:
                    0x79a52: rsp += 104 # add rsp, 0x68
                    0x79a56: rax = rcx # mov rax, rcx
                    0x79a59: pop rbx
                    0x79a5a: pop rbp
                    0x79a5b: pop r12
                    0x79a5d: pop r13
                    0x79a5f: pop r14
                    0x79a61: pop r15
                    0x79a63: ret
                }
                ret_0x79eec:
                0x79eec: rax = *(0x39de60) # mov rax, qword ptr [rip + 0x323f6d]
                0x79ef3: ecx = 0 # xor ecx, ecx
                0x79ef5: *(rax) = 12 # mov dword ptr fs:[rax], 0xc
                0x79efc: rax = rcx # mov rax, rcx
                0x79eff: ret
            }
            0x7b5d0: push rbx
            0x7b5d1: rbx = rdi # mov rbx, rdi
            0x7b5d4: call 0x77f00
            # 0x7b5d9: test eax, eax
            # 0x7b5db: js 0x7b5f9
            if (eax > 0) {
                0x7b5dd: rsi = rbx + 1 # lea rsi, qword ptr [rbx + 1]
                0x7b5e1: rdi = main_arena # lea rdi, qword ptr [rip + 0x323558]
                0x7b5e8: call _int_malloc
                0x7b5ed: rsi = rbx # mov rsi, rbx
                0x7b5f0: rdi = rax # mov rdi, rax
                0x7b5f3: pop rbx
                0x7b5f4: jmp mem2mem_check
                mem2mem_check
                0x77110: test rdi, rdi
                0x77113: rax = rdi # mov rax, rdi
                # 0x77116: je 0x771a0
                if != {
                    0x7711c: rdx = rdi - 16 # lea rdx, qword ptr [rdi - 0x10]
                    0x77120: rdi = *(rdi - 8) # mov rdi, qword ptr [rdi - 8]
                    0x77124: r9d = 255 # mov r9d, 0xff
                    0x7712a: r10 = rdx # mov r10, rdx
                    0x7712d: rdx >>= 11 # shr rdx, 0xb
                    0x77131: r10 >>= 3 # shr r10, 3
                    0x77135: r10d ^= edx # xor r10d, edx
                    0x77138: edx = 2 # mov edx, 2
                    0x7713d: r10b cmp '\x01' # cmp r10b, 1
                    0x77141: cmove r10d, edx
                    0x77145: rdx = rdi # mov rdx, rdi
                    0x77148: rdx &= -8 # and rdx, 0xfffffffffffffff8
                    0x7714c: rcx = rdx - 16 # lea rcx, qword ptr [rdx - 0x10]
                    0x77150: rdx -= 8 # sub rdx, 8
                    0x77154: edi &= 2 # and edi, 2
                    0x77157: edi = (zero ext) r10b # movzx edi, r10b
                    0x7715b: cmove rcx, rdx
                    0x7715f: r8 = rdi - 1 # lea r8, qword ptr [rdi - 1]
                    0x77163: rcx -= 1 # sub rcx, 1
                    # 0x77167: cmp rcx, rsi
                    # 0x7716a: jbe 0x77193
                    if (rcx (unsigned) > rsi) {
                        0x7716c: nop *(rax) # nop dword ptr [rax]
                        loop {
                            loop_0x77170:
                            0x77170: rdx = rcx # mov rdx, rcx
                            0x77173: rdx -= rsi # sub rdx, rsi
                            0x77176: rdx cmp 255 # cmp rdx, 0xff
                            0x7717d: cmova rdx, r9
                            0x77181: rdx cmp rdi # cmp rdx, rdi
                            0x77184: cmove rdx, r8
                            0x77188: *(rax + rcx) = dl # mov byte ptr [rax + rcx], dl
                            0x7718b: rcx -= rdx # sub rcx, rdx
                            # 0x7718e: cmp rsi, rcx
                            # 0x77191: jb 0x77170
                            if (rsi (unsigned) >= rcx)  goto ret_0x77193
                        }
                    }
                } else {
                    ret_0x771a0:
                    0x771a0: ret
                }
            } else {
                ret_0x7b5f9:
                0x7b5f9: eax = 0 # xor eax, eax
                0x7b5fb: pop rbx
                0x7b5fc: ret
            }
            ret_0x77193:
            0x77193: *(rax + rsi) = r10b # mov byte ptr [rax + rsi], r10b
            0x77197: ret
        }
        0x7b43c: rax = rdx # mov rax, rdx
        goto ret_0x7b43f
    }
    0x7b4f8: eax = 0 # xor eax, eax
    0x7b4fa: jmp 0x7b43f
    ret_0x7b43f:
    0x7b43f: rsp += 8 # add rsp, 8
    0x7b443: pop rbx
    0x7b444: pop rbp
    0x7b445: ret
}
